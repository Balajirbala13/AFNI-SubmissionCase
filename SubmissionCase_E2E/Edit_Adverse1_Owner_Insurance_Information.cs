///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Edit_Adverse1_Owner_Insurance_Information recording.
    /// </summary>
    [TestModule("dc303be9-eb00-415a-86b5-924784163675", ModuleType.Recording, 1)]
    public partial class Edit_Adverse1_Owner_Insurance_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Edit_Adverse1_Owner_Insurance_Information instance = new Edit_Adverse1_Owner_Insurance_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Edit_Adverse1_Owner_Insurance_Information()
        {
            AO_LI_Company_Name = "";
            AO_LI_PolicyNumber = "";
            AO_LI_ClaimNumber = "";
            AO_LI_ContactName = "";
            AO_LI_State = "";
            AO_LI_Address1 = "";
            AO_LI_Address2 = "";
            AO_LI_City = "";
            AO_LI_Zip = "";
            AO_LI_PhoneUseType_getValue = "";
            AO_LI_PhoneType_getValue = "";
            AO_LI_PhoneSource_getValue = "";
            AO_LI_PhoneNumber_getValue = "";
            AO_LI_EmailUseType_getValue = "";
            AO_LI_EmailSource_getValue = "";
            AO_LI_EmailId_getValue = "";
            Edit_AO_LI_Company_Name = "Edit_AO_LI_Company_Name";
            Edit_AO_LI_PolicyNumber = "Edit_AO_LI_PolicyNumber";
            Edit_AO_LI_ClaimNumber = "Edit_AO_LI_ClaimNumber";
            Edit_AO_LI_ContactName = "Edit_AO_LI_ContactName";
            Edit_AO_LI_State = "DE";
            Edit_AO_LI_Address1 = "Edit_AO_LI_Address1";
            Edit_AO_LI_Address2 = "Edit_AO_LI_Address2";
            Edit_AO_LI_City = "Edit_AO_LI_City";
            Edit_AO_LI_Zip = "200042000";
            Edit_AO_LI_PhoneUseType_getValue = "Business";
            Edit_AO_LI_PhoneType_getValue = "Work";
            Edit_AO_LI_PhoneSource_getValue = "Skip Trace";
            Edit_AO_LI_PhoneNumber_getValue = "9600095005";
            Edit_AO_LI_EmailUseType_getValue = "Personal";
            Edit_AO_LI_EmailSource_getValue = "Skip Trace";
            Edit_AO_LI_EmailId_getValue = "EditAO1LIEmail@gmail.com";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Edit_Adverse1_Owner_Insurance_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AO_LI_Company_Name;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_Company_Name.
        /// </summary>
        [TestVariable("bb2e7699-9b70-4222-8560-ab459d08c0c1")]
        public string AO_LI_Company_Name
        {
            get { return _AO_LI_Company_Name; }
            set { _AO_LI_Company_Name = value; }
        }

        string _AO_LI_PolicyNumber;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_PolicyNumber.
        /// </summary>
        [TestVariable("cf6bbcca-0b43-452b-a842-1cbfd666461d")]
        public string AO_LI_PolicyNumber
        {
            get { return _AO_LI_PolicyNumber; }
            set { _AO_LI_PolicyNumber = value; }
        }

        string _AO_LI_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_ClaimNumber.
        /// </summary>
        [TestVariable("0b50005e-902e-420b-af3b-d11761294325")]
        public string AO_LI_ClaimNumber
        {
            get { return _AO_LI_ClaimNumber; }
            set { _AO_LI_ClaimNumber = value; }
        }

        string _AO_LI_ContactName;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_ContactName.
        /// </summary>
        [TestVariable("a3b0e751-5c85-4f7b-9aaa-4c0a3deaac8a")]
        public string AO_LI_ContactName
        {
            get { return _AO_LI_ContactName; }
            set { _AO_LI_ContactName = value; }
        }

        string _AO_LI_State;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_State.
        /// </summary>
        [TestVariable("21e8f548-020e-46ca-ad53-1283a1b525a0")]
        public string AO_LI_State
        {
            get { return _AO_LI_State; }
            set { _AO_LI_State = value; }
        }

        string _AO_LI_Address1;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_Address1.
        /// </summary>
        [TestVariable("894c6e49-87e2-4027-9cc5-15c98c7b69ce")]
        public string AO_LI_Address1
        {
            get { return _AO_LI_Address1; }
            set { _AO_LI_Address1 = value; }
        }

        string _AO_LI_Address2;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_Address2.
        /// </summary>
        [TestVariable("91a65a9e-4848-4ca0-8739-de536a7100ee")]
        public string AO_LI_Address2
        {
            get { return _AO_LI_Address2; }
            set { _AO_LI_Address2 = value; }
        }

        string _AO_LI_City;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_City.
        /// </summary>
        [TestVariable("9b371c71-e965-46b7-a4f9-04779103afa5")]
        public string AO_LI_City
        {
            get { return _AO_LI_City; }
            set { _AO_LI_City = value; }
        }

        string _AO_LI_Zip;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_Zip.
        /// </summary>
        [TestVariable("1f31abf5-5104-4714-b489-c84e422cd4eb")]
        public string AO_LI_Zip
        {
            get { return _AO_LI_Zip; }
            set { _AO_LI_Zip = value; }
        }

        string _AO_LI_PhoneUseType_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_PhoneUseType_getValue.
        /// </summary>
        [TestVariable("db48c78e-63ec-4c2c-994c-1b399444a448")]
        public string AO_LI_PhoneUseType_getValue
        {
            get { return _AO_LI_PhoneUseType_getValue; }
            set { _AO_LI_PhoneUseType_getValue = value; }
        }

        string _AO_LI_PhoneType_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_PhoneType_getValue.
        /// </summary>
        [TestVariable("145403e7-f68c-4d86-aebb-0048f27de019")]
        public string AO_LI_PhoneType_getValue
        {
            get { return _AO_LI_PhoneType_getValue; }
            set { _AO_LI_PhoneType_getValue = value; }
        }

        string _AO_LI_PhoneSource_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_PhoneSource_getValue.
        /// </summary>
        [TestVariable("b3b79694-4657-4123-ace8-e83ac3581f7a")]
        public string AO_LI_PhoneSource_getValue
        {
            get { return _AO_LI_PhoneSource_getValue; }
            set { _AO_LI_PhoneSource_getValue = value; }
        }

        string _AO_LI_PhoneNumber_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_PhoneNumber_getValue.
        /// </summary>
        [TestVariable("406ded0d-4ddf-4f78-af92-00c49bd24f67")]
        public string AO_LI_PhoneNumber_getValue
        {
            get { return _AO_LI_PhoneNumber_getValue; }
            set { _AO_LI_PhoneNumber_getValue = value; }
        }

        string _AO_LI_EmailUseType_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_EmailUseType_getValue.
        /// </summary>
        [TestVariable("bfb73524-7032-4548-9203-ae04b441cc66")]
        public string AO_LI_EmailUseType_getValue
        {
            get { return _AO_LI_EmailUseType_getValue; }
            set { _AO_LI_EmailUseType_getValue = value; }
        }

        string _AO_LI_EmailSource_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_EmailSource_getValue.
        /// </summary>
        [TestVariable("1ea1f22c-00a4-4c3a-926a-fe250c50baab")]
        public string AO_LI_EmailSource_getValue
        {
            get { return _AO_LI_EmailSource_getValue; }
            set { _AO_LI_EmailSource_getValue = value; }
        }

        string _AO_LI_EmailId_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_EmailId_getValue.
        /// </summary>
        [TestVariable("ca05f8b8-5d22-4d37-9eaa-9e0222f63fea")]
        public string AO_LI_EmailId_getValue
        {
            get { return _AO_LI_EmailId_getValue; }
            set { _AO_LI_EmailId_getValue = value; }
        }

        string _Edit_AO_LI_Company_Name;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_Company_Name.
        /// </summary>
        [TestVariable("6a0f1849-3da0-4184-b021-b7b841cece1f")]
        public string Edit_AO_LI_Company_Name
        {
            get { return _Edit_AO_LI_Company_Name; }
            set { _Edit_AO_LI_Company_Name = value; }
        }

        string _Edit_AO_LI_PolicyNumber;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_PolicyNumber.
        /// </summary>
        [TestVariable("8b0670f1-0167-4842-902e-4efc074aad1e")]
        public string Edit_AO_LI_PolicyNumber
        {
            get { return _Edit_AO_LI_PolicyNumber; }
            set { _Edit_AO_LI_PolicyNumber = value; }
        }

        string _Edit_AO_LI_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_ClaimNumber.
        /// </summary>
        [TestVariable("c4651808-12d8-4456-acf9-e5f648ca0196")]
        public string Edit_AO_LI_ClaimNumber
        {
            get { return _Edit_AO_LI_ClaimNumber; }
            set { _Edit_AO_LI_ClaimNumber = value; }
        }

        string _Edit_AO_LI_ContactName;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_ContactName.
        /// </summary>
        [TestVariable("dbddc22b-4c23-49e6-a427-f97d461a126a")]
        public string Edit_AO_LI_ContactName
        {
            get { return _Edit_AO_LI_ContactName; }
            set { _Edit_AO_LI_ContactName = value; }
        }

        string _Edit_AO_LI_State;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_State.
        /// </summary>
        [TestVariable("d7bd244d-c74c-45ae-a2f4-ee4673feb675")]
        public string Edit_AO_LI_State
        {
            get { return _Edit_AO_LI_State; }
            set { _Edit_AO_LI_State = value; }
        }

        string _Edit_AO_LI_Address1;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_Address1.
        /// </summary>
        [TestVariable("ea2bbba8-6d0b-441a-81fc-002cebde1953")]
        public string Edit_AO_LI_Address1
        {
            get { return _Edit_AO_LI_Address1; }
            set { _Edit_AO_LI_Address1 = value; }
        }

        string _Edit_AO_LI_Address2;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_Address2.
        /// </summary>
        [TestVariable("90a4b730-3554-416f-93cf-427be9dab22e")]
        public string Edit_AO_LI_Address2
        {
            get { return _Edit_AO_LI_Address2; }
            set { _Edit_AO_LI_Address2 = value; }
        }

        string _Edit_AO_LI_City;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_City.
        /// </summary>
        [TestVariable("7033710b-5fc7-4f80-9fbf-bbaf5e3f53ab")]
        public string Edit_AO_LI_City
        {
            get { return _Edit_AO_LI_City; }
            set { _Edit_AO_LI_City = value; }
        }

        string _Edit_AO_LI_Zip;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_Zip.
        /// </summary>
        [TestVariable("62f27ceb-70f6-4e9c-a1aa-254f20c52b57")]
        public string Edit_AO_LI_Zip
        {
            get { return _Edit_AO_LI_Zip; }
            set { _Edit_AO_LI_Zip = value; }
        }

        string _Edit_AO_LI_PhoneUseType_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_PhoneUseType_getValue.
        /// </summary>
        [TestVariable("e84b351e-45a9-4db1-85c1-2bb15a7b47cd")]
        public string Edit_AO_LI_PhoneUseType_getValue
        {
            get { return _Edit_AO_LI_PhoneUseType_getValue; }
            set { _Edit_AO_LI_PhoneUseType_getValue = value; }
        }

        string _Edit_AO_LI_PhoneType_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_PhoneType_getValue.
        /// </summary>
        [TestVariable("d5ce9880-6762-4b6d-83c6-9a1251bcc967")]
        public string Edit_AO_LI_PhoneType_getValue
        {
            get { return _Edit_AO_LI_PhoneType_getValue; }
            set { _Edit_AO_LI_PhoneType_getValue = value; }
        }

        string _Edit_AO_LI_PhoneSource_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_PhoneSource_getValue.
        /// </summary>
        [TestVariable("7ba14ed3-5e51-4717-ae7f-68871b62db57")]
        public string Edit_AO_LI_PhoneSource_getValue
        {
            get { return _Edit_AO_LI_PhoneSource_getValue; }
            set { _Edit_AO_LI_PhoneSource_getValue = value; }
        }

        string _Edit_AO_LI_PhoneNumber_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_PhoneNumber_getValue.
        /// </summary>
        [TestVariable("b5cc8bb0-4608-457b-8f4a-8f471b4c3743")]
        public string Edit_AO_LI_PhoneNumber_getValue
        {
            get { return _Edit_AO_LI_PhoneNumber_getValue; }
            set { _Edit_AO_LI_PhoneNumber_getValue = value; }
        }

        string _Edit_AO_LI_EmailUseType_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_EmailUseType_getValue.
        /// </summary>
        [TestVariable("5ce4f5e3-be8d-4fe1-a2ae-737d44722f39")]
        public string Edit_AO_LI_EmailUseType_getValue
        {
            get { return _Edit_AO_LI_EmailUseType_getValue; }
            set { _Edit_AO_LI_EmailUseType_getValue = value; }
        }

        string _Edit_AO_LI_EmailSource_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_EmailSource_getValue.
        /// </summary>
        [TestVariable("433b8a96-8b6a-4aa4-985b-dd204aafef88")]
        public string Edit_AO_LI_EmailSource_getValue
        {
            get { return _Edit_AO_LI_EmailSource_getValue; }
            set { _Edit_AO_LI_EmailSource_getValue = value; }
        }

        string _Edit_AO_LI_EmailId_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_EmailId_getValue.
        /// </summary>
        [TestVariable("fe95c7d4-9fa0-49c2-b377-5a59d7b720b4")]
        public string Edit_AO_LI_EmailId_getValue
        {
            get { return _Edit_AO_LI_EmailId_getValue; }
            set { _Edit_AO_LI_EmailId_getValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(0));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_CompanyName' and assigning its value to variable 'AO_LI_Company_Name'.", repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, new RecordItemIndex(1));
            AO_LI_Company_Name = repo.ApplicationUnderTest.AO_LI_CompanyName.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_Company_Name) on item 'ApplicationUnderTest.AO_LI_CompanyName'.", repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, "TagValue", AO_LI_Company_Name);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_Company_Name, new RecordItemIndex(3));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_Company_Name' with focus on 'ApplicationUnderTest.AO_LI_CompanyName'.", repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AO_LI_CompanyName.PressKeys(Edit_AO_LI_Company_Name);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.OAT_IL_RentalCompany'.", repo.ApplicationUnderTest.OAT_IL_RentalCompanyInfo, new RecordItemIndex(7));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.OAT_IL_RentalCompanyInfo, "Checked", "True");
            //Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_PolicyNumber' and assigning its value to variable 'AO_LI_PolicyNumber'.", repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, new RecordItemIndex(8));
            //AO_LI_PolicyNumber = repo.ApplicationUnderTest.AO_LI_PolicyNumber.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_PolicyNumber) on item 'ApplicationUnderTest.AO_LI_PolicyNumber'.", repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, "TagValue", AO_LI_PolicyNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_PolicyNumber, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(11));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(12));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_PolicyNumber' with focus on 'ApplicationUnderTest.AO_LI_PolicyNumber'.", repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.AO_LI_PolicyNumber.PressKeys(Edit_AO_LI_PolicyNumber);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_ClaimNumber' and assigning its value to variable 'AO_LI_ClaimNumber'.", repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, new RecordItemIndex(14));
            //AO_LI_ClaimNumber = repo.ApplicationUnderTest.AO_LI_ClaimNumber.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_ClaimNumber) on item 'ApplicationUnderTest.AO_LI_ClaimNumber'.", repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, "TagValue", AO_LI_ClaimNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_ClaimNumber, new RecordItemIndex(16));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_ClaimNumber' with focus on 'ApplicationUnderTest.AO_LI_ClaimNumber'.", repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.AO_LI_ClaimNumber.PressKeys(Edit_AO_LI_ClaimNumber);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_ContactName' and assigning its value to variable 'AO_LI_ContactName'.", repo.ApplicationUnderTest.AO_LI_ContactNameInfo, new RecordItemIndex(20));
            //AO_LI_ContactName = repo.ApplicationUnderTest.AO_LI_ContactName.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_ContactName) on item 'ApplicationUnderTest.AO_LI_ContactName'.", repo.ApplicationUnderTest.AO_LI_ContactNameInfo, new RecordItemIndex(21));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ContactNameInfo, "TagValue", AO_LI_ContactName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_ContactName, new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(23));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(24));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_ContactName' with focus on 'ApplicationUnderTest.AO_LI_ContactName'.", repo.ApplicationUnderTest.AO_LI_ContactNameInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.AO_LI_ContactName.PressKeys(Edit_AO_LI_ContactName);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_State' and assigning its value to variable 'AO_LI_State'.", repo.ApplicationUnderTest.AO_LI_StateInfo, new RecordItemIndex(26));
            //AO_LI_State = repo.ApplicationUnderTest.AO_LI_State.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_State) on item 'ApplicationUnderTest.AO_LI_State'.", repo.ApplicationUnderTest.AO_LI_StateInfo, new RecordItemIndex(27));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_StateInfo, "TagValue", AO_LI_State);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_State, new RecordItemIndex(28));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(29));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(30));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_State' with focus on 'ApplicationUnderTest.AO_LI_State'.", repo.ApplicationUnderTest.AO_LI_StateInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.AO_LI_State.PressKeys(Edit_AO_LI_State);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_Address1' and assigning its value to variable 'AO_LI_Address1'.", repo.ApplicationUnderTest.AO_LI_Address1Info, new RecordItemIndex(32));
            //AO_LI_Address1 = repo.ApplicationUnderTest.AO_LI_Address1.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_Address1) on item 'ApplicationUnderTest.AO_LI_Address1'.", repo.ApplicationUnderTest.AO_LI_Address1Info, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_Address1Info, "TagValue", AO_LI_Address1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_Address1, new RecordItemIndex(34));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(35));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(36));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_Address1' with focus on 'ApplicationUnderTest.AO_LI_Address1'.", repo.ApplicationUnderTest.AO_LI_Address1Info, new RecordItemIndex(37));
            repo.ApplicationUnderTest.AO_LI_Address1.PressKeys(Edit_AO_LI_Address1);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_Address2' and assigning its value to variable 'AO_LI_Address2'.", repo.ApplicationUnderTest.AO_LI_Address2Info, new RecordItemIndex(38));
            //AO_LI_Address2 = repo.ApplicationUnderTest.AO_LI_Address2.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_Address2) on item 'ApplicationUnderTest.AO_LI_Address2'.", repo.ApplicationUnderTest.AO_LI_Address2Info, new RecordItemIndex(39));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_Address2Info, "TagValue", AO_LI_Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_Address2, new RecordItemIndex(40));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(41));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(42));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AO_LI_Address2'.", repo.ApplicationUnderTest.AO_LI_Address2Info, new RecordItemIndex(43));
            repo.ApplicationUnderTest.AO_LI_Address2.PressKeys("");
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_City' and assigning its value to variable 'AO_LI_City'.", repo.ApplicationUnderTest.AO_LI_CityInfo, new RecordItemIndex(44));
            //AO_LI_City = repo.ApplicationUnderTest.AO_LI_City.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_City) on item 'ApplicationUnderTest.AO_LI_City'.", repo.ApplicationUnderTest.AO_LI_CityInfo, new RecordItemIndex(45));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_CityInfo, "TagValue", AO_LI_City);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_City, new RecordItemIndex(46));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(47));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(48));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AO_LI_City'.", repo.ApplicationUnderTest.AO_LI_CityInfo, new RecordItemIndex(49));
            repo.ApplicationUnderTest.AO_LI_City.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_Zip' and assigning its value to variable 'AO_LI_Zip'.", repo.ApplicationUnderTest.AO_LI_ZipInfo, new RecordItemIndex(50));
            AO_LI_Zip = repo.ApplicationUnderTest.AO_LI_Zip.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_Zip) on item 'ApplicationUnderTest.AO_LI_Zip'.", repo.ApplicationUnderTest.AO_LI_ZipInfo, new RecordItemIndex(51));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ZipInfo, "TagValue", AO_LI_Zip);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_Zip, new RecordItemIndex(52));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(53));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(54));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AO_LI_Zip'.", repo.ApplicationUnderTest.AO_LI_ZipInfo, new RecordItemIndex(55));
            repo.ApplicationUnderTest.AO_LI_Zip.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(56));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_PhoneUseType' and assigning its value to variable 'AO_LI_PhoneUseType_getValue'.", repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, new RecordItemIndex(57));
            AO_LI_PhoneUseType_getValue = repo.ApplicationUnderTest.AO_LI_PhoneUseType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_PhoneUseType_getValue, new RecordItemIndex(58));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_PhoneUseType_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneUseType'.", repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, new RecordItemIndex(59));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, "TagValue", AO_LI_PhoneUseType_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(60));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(61));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AO_LI_PhoneUseType_getValue' on item 'ApplicationUnderTest.AO_LI_PhoneUseType'.", repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, new RecordItemIndex(62));
            repo.ApplicationUnderTest.AO_LI_PhoneUseType.Element.SetAttributeValue("TagValue", Edit_AO_LI_PhoneUseType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_PhoneType' and assigning its value to variable 'AO_LI_PhoneType_getValue'.", repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, new RecordItemIndex(63));
            AO_LI_PhoneType_getValue = repo.ApplicationUnderTest.AO_LI_PhoneType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_PhoneType_getValue, new RecordItemIndex(64));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_PhoneType_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneType'.", repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, new RecordItemIndex(65));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, "TagValue", AO_LI_PhoneType_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(66));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(67));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AO_LI_PhoneType_getValue' on item 'ApplicationUnderTest.AO_LI_PhoneType'.", repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, new RecordItemIndex(68));
            repo.ApplicationUnderTest.AO_LI_PhoneType.Element.SetAttributeValue("TagValue", Edit_AO_LI_PhoneType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_PhoneSource' and assigning its value to variable 'AO_LI_PhoneSource_getValue'.", repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, new RecordItemIndex(69));
            AO_LI_PhoneSource_getValue = repo.ApplicationUnderTest.AO_LI_PhoneSource.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_PhoneSource_getValue, new RecordItemIndex(70));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_PhoneSource_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneSource'.", repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, new RecordItemIndex(71));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, "TagValue", AO_LI_PhoneSource_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(72));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(73));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AO_LI_PhoneSource_getValue' on item 'ApplicationUnderTest.AO_LI_PhoneSource'.", repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, new RecordItemIndex(74));
            repo.ApplicationUnderTest.AO_LI_PhoneSource.Element.SetAttributeValue("TagValue", Edit_AO_LI_PhoneSource_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_PhoneNumber' and assigning its value to variable 'AO_LI_PhoneNumber_getValue'.", repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, new RecordItemIndex(75));
            AO_LI_PhoneNumber_getValue = repo.ApplicationUnderTest.AO_LI_PhoneNumber.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_PhoneNumber_getValue, new RecordItemIndex(76));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_PhoneNumber_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneNumber'.", repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, new RecordItemIndex(77));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, "TagValue", AO_LI_PhoneNumber_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(78));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(79));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AO_LI_PhoneNumber'.", repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, new RecordItemIndex(80));
            repo.ApplicationUnderTest.AO_LI_PhoneNumber.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_EmailUseType' and assigning its value to variable 'AO_LI_EmailUseType_getValue'.", repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, new RecordItemIndex(81));
            AO_LI_EmailUseType_getValue = repo.ApplicationUnderTest.AO_LI_EmailUseType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_EmailUseType_getValue, new RecordItemIndex(82));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_EmailUseType_getValue) on item 'ApplicationUnderTest.AO_LI_EmailUseType'.", repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, new RecordItemIndex(83));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, "TagValue", AO_LI_EmailUseType_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(84));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(85));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AO_LI_EmailUseType_getValue' on item 'ApplicationUnderTest.AO_LI_EmailUseType'.", repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, new RecordItemIndex(86));
            repo.ApplicationUnderTest.AO_LI_EmailUseType.Element.SetAttributeValue("TagValue", Edit_AO_LI_EmailUseType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_EmailSource' and assigning its value to variable 'AO_LI_EmailSource_getValue'.", repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, new RecordItemIndex(87));
            AO_LI_EmailSource_getValue = repo.ApplicationUnderTest.AO_LI_EmailSource.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_EmailSource_getValue, new RecordItemIndex(88));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_EmailSource_getValue) on item 'ApplicationUnderTest.AO_LI_EmailSource'.", repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, new RecordItemIndex(89));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, "TagValue", AO_LI_EmailSource_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(90));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(91));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AO_LI_EmailSource_getValue' on item 'ApplicationUnderTest.AO_LI_EmailSource'.", repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, new RecordItemIndex(92));
            repo.ApplicationUnderTest.AO_LI_EmailSource.Element.SetAttributeValue("TagValue", Edit_AO_LI_EmailSource_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_EmailId' and assigning its value to variable 'AO_LI_EmailId_getValue'.", repo.ApplicationUnderTest.AO_LI_EmailIdInfo, new RecordItemIndex(93));
            AO_LI_EmailId_getValue = repo.ApplicationUnderTest.AO_LI_EmailId.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_EmailId_getValue, new RecordItemIndex(94));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_EmailId_getValue) on item 'ApplicationUnderTest.AO_LI_EmailId'.", repo.ApplicationUnderTest.AO_LI_EmailIdInfo, new RecordItemIndex(95));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailIdInfo, "TagValue", AO_LI_EmailId_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(96));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(97));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_EmailId_getValue' with focus on 'ApplicationUnderTest.AO_LI_EmailId'.", repo.ApplicationUnderTest.AO_LI_EmailIdInfo, new RecordItemIndex(98));
            repo.ApplicationUnderTest.AO_LI_EmailId.PressKeys(Edit_AO_LI_EmailId_getValue);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(99));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(100));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_Company_Name) on item 'ApplicationUnderTest.AO_LI_CompanyName'.", repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, new RecordItemIndex(101));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_CompanyNameInfo, "InnerText", Edit_AO_LI_Company_Name);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_Company_Name, new RecordItemIndex(102));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_PolicyNumber) on item 'ApplicationUnderTest.AO_LI_PolicyNumber'.", repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, new RecordItemIndex(103));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PolicyNumberInfo, "InnerText", Edit_AO_LI_PolicyNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_PolicyNumber, new RecordItemIndex(104));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_ClaimNumber) on item 'ApplicationUnderTest.AO_LI_ClaimNumber'.", repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, new RecordItemIndex(105));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ClaimNumberInfo, "InnerText", Edit_AO_LI_ClaimNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_ClaimNumber, new RecordItemIndex(106));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_ContactName) on item 'ApplicationUnderTest.AO_LI_ContactName'.", repo.ApplicationUnderTest.AO_LI_ContactNameInfo, new RecordItemIndex(107));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ContactNameInfo, "InnerText", Edit_AO_LI_ContactName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_ContactName, new RecordItemIndex(108));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_State) on item 'ApplicationUnderTest.AO_LI_State'.", repo.ApplicationUnderTest.AO_LI_StateInfo, new RecordItemIndex(109));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_StateInfo, "InnerText", Edit_AO_LI_State);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_State, new RecordItemIndex(110));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_Address1) on item 'ApplicationUnderTest.AO_LI_Address1'.", repo.ApplicationUnderTest.AO_LI_Address1Info, new RecordItemIndex(111));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_Address1Info, "InnerText", Edit_AO_LI_Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_Address1, new RecordItemIndex(112));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_Address2) on item 'ApplicationUnderTest.AO_LI_Address2'.", repo.ApplicationUnderTest.AO_LI_Address2Info, new RecordItemIndex(113));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_Address2Info, "InnerText", Edit_AO_LI_Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_Address2, new RecordItemIndex(114));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_City) on item 'ApplicationUnderTest.AO_LI_City'.", repo.ApplicationUnderTest.AO_LI_CityInfo, new RecordItemIndex(115));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_CityInfo, "InnerText", Edit_AO_LI_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_City, new RecordItemIndex(116));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_Zip) on item 'ApplicationUnderTest.AO_LI_Zip'.", repo.ApplicationUnderTest.AO_LI_ZipInfo, new RecordItemIndex(117));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_ZipInfo, "InnerText", Edit_AO_LI_Zip);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_Zip, new RecordItemIndex(118));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_PhoneUseType_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneUseType'.", repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, new RecordItemIndex(119));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneUseTypeInfo, "InnerText", Edit_AO_LI_PhoneUseType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_PhoneUseType_getValue, new RecordItemIndex(120));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_PhoneType_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneType'.", repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, new RecordItemIndex(121));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneTypeInfo, "InnerText", Edit_AO_LI_PhoneType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_PhoneType_getValue, new RecordItemIndex(122));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_PhoneSource_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneSource'.", repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, new RecordItemIndex(123));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneSourceInfo, "InnerText", Edit_AO_LI_PhoneSource_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_PhoneSource_getValue, new RecordItemIndex(124));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_PhoneNumber_getValue) on item 'ApplicationUnderTest.AO_LI_PhoneNumber'.", repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, new RecordItemIndex(125));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_PhoneNumberInfo, "InnerText", Edit_AO_LI_PhoneNumber_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_PhoneNumber_getValue, new RecordItemIndex(126));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_EmailUseType_getValue) on item 'ApplicationUnderTest.AO_LI_EmailUseType'.", repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, new RecordItemIndex(127));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailUseTypeInfo, "InnerText", Edit_AO_LI_EmailUseType_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_EmailUseType_getValue, new RecordItemIndex(128));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_EmailSource_getValue) on item 'ApplicationUnderTest.AO_LI_EmailSource'.", repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, new RecordItemIndex(129));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailSourceInfo, "InnerText", Edit_AO_LI_EmailSource_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_EmailSource_getValue, new RecordItemIndex(130));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_EmailId_getValue) on item 'ApplicationUnderTest.AO_LI_EmailId'.", repo.ApplicationUnderTest.AO_LI_EmailIdInfo, new RecordItemIndex(131));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmailIdInfo, "InnerText", Edit_AO_LI_EmailId_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_EmailId_getValue, new RecordItemIndex(132));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 46;15.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(133));
            repo.ApplicationUnderTest.SubmitButton1.Click("46;15");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
