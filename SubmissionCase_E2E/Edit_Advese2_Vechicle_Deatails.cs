///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Edit_Advese2_Vechicle_Deatails recording.
    /// </summary>
    [TestModule("7a6275dc-386e-4c2b-9a05-c6d498b899a9", ModuleType.Recording, 1)]
    public partial class Edit_Advese2_Vechicle_Deatails : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Edit_Advese2_Vechicle_Deatails instance = new Edit_Advese2_Vechicle_Deatails();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Edit_Advese2_Vechicle_Deatails()
        {
            LicensePlate1 = "";
            LicensePlateState1 = "";
            AD2_Vin_Year = "";
            AD2_VIN_Make = "";
            AD2_VIN_Model = "";
            Edit_LicensePlate1 = "MH15 HJ 1002E";
            Edit_LicensePlateState1 = "KS";
            Edit_AD2_Vin_Year = "";
            Edit_AD2_VIN_Make = "";
            Edit_AD2_VIN_Model = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Edit_Advese2_Vechicle_Deatails Instance
        {
            get { return instance; }
        }

#region Variables

        string _LicensePlate1;

        /// <summary>
        /// Gets or sets the value of variable LicensePlate1.
        /// </summary>
        [TestVariable("501313a7-fc3e-4ad2-8ec8-d2c495a2d976")]
        public string LicensePlate1
        {
            get { return _LicensePlate1; }
            set { _LicensePlate1 = value; }
        }

        string _LicensePlateState1;

        /// <summary>
        /// Gets or sets the value of variable LicensePlateState1.
        /// </summary>
        [TestVariable("37d74fe3-b754-4be4-9942-6744ba6d4b97")]
        public string LicensePlateState1
        {
            get { return _LicensePlateState1; }
            set { _LicensePlateState1 = value; }
        }

        string _AD2_Vin_Year;

        /// <summary>
        /// Gets or sets the value of variable AD2_Vin_Year.
        /// </summary>
        [TestVariable("df77c5c6-66e0-4529-b959-f23c700319ff")]
        public string AD2_Vin_Year
        {
            get { return _AD2_Vin_Year; }
            set { _AD2_Vin_Year = value; }
        }

        string _AD2_VIN_Make;

        /// <summary>
        /// Gets or sets the value of variable AD2_VIN_Make.
        /// </summary>
        [TestVariable("50cf6888-5bbe-4900-b64a-01a5fd04abe3")]
        public string AD2_VIN_Make
        {
            get { return _AD2_VIN_Make; }
            set { _AD2_VIN_Make = value; }
        }

        string _AD2_VIN_Model;

        /// <summary>
        /// Gets or sets the value of variable AD2_VIN_Model.
        /// </summary>
        [TestVariable("aefe0051-c815-4e9f-a77e-e34a27a117df")]
        public string AD2_VIN_Model
        {
            get { return _AD2_VIN_Model; }
            set { _AD2_VIN_Model = value; }
        }

        string _Edit_LicensePlate1;

        /// <summary>
        /// Gets or sets the value of variable Edit_LicensePlate1.
        /// </summary>
        [TestVariable("1494b25a-ec8f-4a16-b842-35888013ef21")]
        public string Edit_LicensePlate1
        {
            get { return _Edit_LicensePlate1; }
            set { _Edit_LicensePlate1 = value; }
        }

        string _Edit_LicensePlateState1;

        /// <summary>
        /// Gets or sets the value of variable Edit_LicensePlateState1.
        /// </summary>
        [TestVariable("0a6a4eaf-cec1-428f-8070-051837c7a884")]
        public string Edit_LicensePlateState1
        {
            get { return _Edit_LicensePlateState1; }
            set { _Edit_LicensePlateState1 = value; }
        }

        string _Edit_AD2_Vin_Year;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD2_Vin_Year.
        /// </summary>
        [TestVariable("74eab7c5-e72c-47e4-a91d-98dcdad4e845")]
        public string Edit_AD2_Vin_Year
        {
            get { return _Edit_AD2_Vin_Year; }
            set { _Edit_AD2_Vin_Year = value; }
        }

        string _Edit_AD2_VIN_Make;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD2_VIN_Make.
        /// </summary>
        [TestVariable("fd68985c-d864-4c80-87e6-af1e25bb2a0b")]
        public string Edit_AD2_VIN_Make
        {
            get { return _Edit_AD2_VIN_Make; }
            set { _Edit_AD2_VIN_Make = value; }
        }

        string _Edit_AD2_VIN_Model;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD2_VIN_Model.
        /// </summary>
        [TestVariable("d5e284e4-95ea-4ffa-80cd-56859447be52")]
        public string Edit_AD2_VIN_Model
        {
            get { return _Edit_AD2_VIN_Model; }
            set { _Edit_AD2_VIN_Model = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(0));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.LabelTagYes1'", repo.ApplicationUnderTest.LabelTagYes1Info, new ActionTimeout(10000), new RecordItemIndex(1));
            repo.ApplicationUnderTest.LabelTagYes1Info.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ApplicationUnderTest.LabelTagNo'.", repo.ApplicationUnderTest.LabelTagNoInfo, new RecordItemIndex(2));
            Validate.Exists(repo.ApplicationUnderTest.LabelTagNoInfo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Id='849b37f2false') on item 'ApplicationUnderTest.LabelTagNo'.", repo.ApplicationUnderTest.LabelTagNoInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LabelTagNoInfo, "Id", "849b37f2false");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$LicensePlate1) on item 'ApplicationUnderTest.LicensePlate1'.", repo.ApplicationUnderTest.LicensePlate1Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LicensePlate1Info, "TagValue", LicensePlate1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(5));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_LicensePlate1' with focus on 'ApplicationUnderTest.LicensePlate1'.", repo.ApplicationUnderTest.LicensePlate1Info, new RecordItemIndex(7));
            repo.ApplicationUnderTest.LicensePlate1.PressKeys(Edit_LicensePlate1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$LicensePlateState1) on item 'ApplicationUnderTest.LicensePlateState1'.", repo.ApplicationUnderTest.LicensePlateState1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LicensePlateState1Info, "TagValue", LicensePlateState1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(9));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(10));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_LicensePlateState1' on item 'ApplicationUnderTest.LicensePlateState1'.", repo.ApplicationUnderTest.LicensePlateState1Info, new RecordItemIndex(11));
            repo.ApplicationUnderTest.LicensePlateState1.Element.SetAttributeValue("TagValue", Edit_LicensePlateState1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.Manual_Model_Details'.", repo.ApplicationUnderTest.Manual_Model_DetailsInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Manual_Model_DetailsInfo, "Checked", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='true') on item 'ApplicationUnderTest.Manual_Model_Details'.", repo.ApplicationUnderTest.Manual_Model_DetailsInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Manual_Model_DetailsInfo, "Value", "true");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(14));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$AD2_Vin_Year) on item 'ApplicationUnderTest.AD2_Vin_Year'.", repo.ApplicationUnderTest.AD2_Vin_YearInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_Vin_YearInfo, "Value", AD2_Vin_Year);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(16));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AD2_Vin_Year'.", repo.ApplicationUnderTest.AD2_Vin_YearInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.AD2_Vin_Year.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$AD2_VIN_Make) on item 'ApplicationUnderTest.AD2_VIN_Make'.", repo.ApplicationUnderTest.AD2_VIN_MakeInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_VIN_MakeInfo, "Value", AD2_VIN_Make);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(20));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(21));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AD2_VIN_Make'.", repo.ApplicationUnderTest.AD2_VIN_MakeInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.AD2_VIN_Make.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$AD2_VIN_Model) on item 'ApplicationUnderTest.AD2_VIN_Model'.", repo.ApplicationUnderTest.AD2_VIN_ModelInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_VIN_ModelInfo, "Value", AD2_VIN_Model);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(24));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'X' Press.", new RecordItemIndex(25));
            Keyboard.Press(System.Windows.Forms.Keys.X, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '' with focus on 'ApplicationUnderTest.AD2_VIN_Model'.", repo.ApplicationUnderTest.AD2_VIN_ModelInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.AD2_VIN_Model.PressKeys("");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(27));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(28));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_LicensePlate1) on item 'ApplicationUnderTest.LicensePlate1'.", repo.ApplicationUnderTest.LicensePlate1Info, new RecordItemIndex(30));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LicensePlate1Info, "TagValue", Edit_LicensePlate1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_LicensePlate1, new RecordItemIndex(31));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_LicensePlateState1) on item 'ApplicationUnderTest.LicensePlateState1'.", repo.ApplicationUnderTest.LicensePlateState1Info, new RecordItemIndex(32));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LicensePlateState1Info, "TagValue", Edit_LicensePlateState1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_LicensePlateState1, new RecordItemIndex(33));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_AD2_Vin_Year) on item 'ApplicationUnderTest.AD2_Vin_Year'.", repo.ApplicationUnderTest.AD2_Vin_YearInfo, new RecordItemIndex(34));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_Vin_YearInfo, "TagValue", Edit_AD2_Vin_Year);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD2_Vin_Year, new RecordItemIndex(35));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_AD2_VIN_Make) on item 'ApplicationUnderTest.AD2_VIN_Make'.", repo.ApplicationUnderTest.AD2_VIN_MakeInfo, new RecordItemIndex(36));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_VIN_MakeInfo, "TagValue", Edit_AD2_VIN_Make);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD2_VIN_Make, new RecordItemIndex(37));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_AD2_VIN_Model) on item 'ApplicationUnderTest.AD2_VIN_Model'.", repo.ApplicationUnderTest.AD2_VIN_ModelInfo, new RecordItemIndex(38));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_VIN_ModelInfo, "TagValue", Edit_AD2_VIN_Model);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD2_VIN_Model, new RecordItemIndex(39));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Submit_4' at 43;11.", repo.ApplicationUnderTest.Submit_4Info, new RecordItemIndex(40));
            repo.ApplicationUnderTest.Submit_4.Click("43;11");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
