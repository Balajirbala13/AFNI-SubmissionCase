///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Edit_Adverse1_Owner_License_Information recording.
    /// </summary>
    [TestModule("f671792a-d2ff-4350-9280-b6ac5479caef", ModuleType.Recording, 1)]
    public partial class Edit_Adverse1_Owner_License_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Edit_Adverse1_Owner_License_Information instance = new Edit_Adverse1_Owner_License_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Edit_Adverse1_Owner_License_Information()
        {
            AO_LI_SSN = "";
            AO_LI_DateOfBirth_getValue = "";
            AO_LI_LicenseNumber = "";
            AO_LI_LicenseState = "";
            AO_LI_RevocationDate_getValue = "";
            Edit_AO_LI_SSN = "E12345SSN1";
            Edit_AO_LI_DateOfBirth_getValue = "3/5/1994";
            Edit_AO_LI_LicenseNumber = "ELICNO123";
            Edit_AO_LI_LicenseState = "UT";
            Edit_AO_LI_RevocationDate_getValue = "7/8/2018";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Edit_Adverse1_Owner_License_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AO_LI_SSN;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_SSN.
        /// </summary>
        [TestVariable("c79c8379-8b71-49ff-bf2b-bbc30f927bf8")]
        public string AO_LI_SSN
        {
            get { return _AO_LI_SSN; }
            set { _AO_LI_SSN = value; }
        }

        string _AO_LI_DateOfBirth_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_DateOfBirth_getValue.
        /// </summary>
        [TestVariable("0bf72657-5583-4f26-aaee-3256d93368b8")]
        public string AO_LI_DateOfBirth_getValue
        {
            get { return _AO_LI_DateOfBirth_getValue; }
            set { _AO_LI_DateOfBirth_getValue = value; }
        }

        string _AO_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseNumber.
        /// </summary>
        [TestVariable("791cb979-45ba-4545-852a-bcf14412597a")]
        public string AO_LI_LicenseNumber
        {
            get { return _AO_LI_LicenseNumber; }
            set { _AO_LI_LicenseNumber = value; }
        }

        string _AO_LI_LicenseState;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseState.
        /// </summary>
        [TestVariable("6c30bd84-ef35-4bb2-b582-aedbdcb8ce1a")]
        public string AO_LI_LicenseState
        {
            get { return _AO_LI_LicenseState; }
            set { _AO_LI_LicenseState = value; }
        }

        string _AO_LI_RevocationDate_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_RevocationDate_getValue.
        /// </summary>
        [TestVariable("b6972164-eed8-4352-af1e-c1a194f7d8b3")]
        public string AO_LI_RevocationDate_getValue
        {
            get { return _AO_LI_RevocationDate_getValue; }
            set { _AO_LI_RevocationDate_getValue = value; }
        }

        string _Edit_AO_LI_SSN;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_SSN.
        /// </summary>
        [TestVariable("caa11019-9a10-480a-ba9b-188d3ed571bf")]
        public string Edit_AO_LI_SSN
        {
            get { return _Edit_AO_LI_SSN; }
            set { _Edit_AO_LI_SSN = value; }
        }

        string _Edit_AO_LI_DateOfBirth_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_DateOfBirth_getValue.
        /// </summary>
        [TestVariable("302b7019-9cae-47e7-a5e3-56afed90fe45")]
        public string Edit_AO_LI_DateOfBirth_getValue
        {
            get { return _Edit_AO_LI_DateOfBirth_getValue; }
            set { _Edit_AO_LI_DateOfBirth_getValue = value; }
        }

        string _Edit_AO_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_LicenseNumber.
        /// </summary>
        [TestVariable("0c1ed3df-edd4-440b-8dea-7c4f6049bfe2")]
        public string Edit_AO_LI_LicenseNumber
        {
            get { return _Edit_AO_LI_LicenseNumber; }
            set { _Edit_AO_LI_LicenseNumber = value; }
        }

        string _Edit_AO_LI_LicenseState;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_LicenseState.
        /// </summary>
        [TestVariable("b32810d1-ac0f-400b-9d38-624f4179e44a")]
        public string Edit_AO_LI_LicenseState
        {
            get { return _Edit_AO_LI_LicenseState; }
            set { _Edit_AO_LI_LicenseState = value; }
        }

        string _Edit_AO_LI_RevocationDate_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AO_LI_RevocationDate_getValue.
        /// </summary>
        [TestVariable("3c5f3bd9-7c8a-495d-8185-dbf7e8a20cd6")]
        public string Edit_AO_LI_RevocationDate_getValue
        {
            get { return _Edit_AO_LI_RevocationDate_getValue; }
            set { _Edit_AO_LI_RevocationDate_getValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='O_Employment Place') on item 'ApplicationUnderTest.AO_LI_EmploymentPlace'.", repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, new RecordItemIndex(2));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, "TagValue", "O_Employment Place");
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_SSN' and assigning its value to variable 'AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(3));
            AO_LI_SSN = repo.ApplicationUnderTest.AO_LI_SSN.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_SSN) on item 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_SSNInfo, "TagValue", AO_LI_SSN);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_SSN, new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(6));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(7));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_SSN' with focus on 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.AO_LI_SSN.PressKeys(Edit_AO_LI_SSN);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_DateOfBirth' and assigning its value to variable 'AO_LI_DateOfBirth_getValue'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(9));
            AO_LI_DateOfBirth_getValue = repo.ApplicationUnderTest.AO_LI_DateOfBirth.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_DateOfBirth_getValue, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_DateOfBirth_getValue) on item 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, "TagValue", AO_LI_DateOfBirth_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(12));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(13));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_DateOfBirth_getValue' with focus on 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.AO_LI_DateOfBirth.PressKeys(Edit_AO_LI_DateOfBirth_getValue);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_LicenseNumber' and assigning its value to variable 'AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(15));
            //AO_LI_LicenseNumber = repo.ApplicationUnderTest.AO_LI_LicenseNumber.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_LicenseNumber) on item 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, "TagValue", AO_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_LicenseNumber, new RecordItemIndex(17));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(19));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_LicenseNumber' with focus on 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.AO_LI_LicenseNumber.PressKeys(Edit_AO_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_LicenseState' and assigning its value to variable 'AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(21));
            //AO_LI_LicenseState = repo.ApplicationUnderTest.AO_LI_LicenseState.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_LicenseState) on item 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(22));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, "TagValue", AO_LI_LicenseState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_LicenseState, new RecordItemIndex(23));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(24));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(25));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_LicenseState' with focus on 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.AO_LI_LicenseState.PressKeys(Edit_AO_LI_LicenseState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_RevocationDate' and assigning its value to variable 'AO_LI_RevocationDate_getValue'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(27));
            AO_LI_RevocationDate_getValue = repo.ApplicationUnderTest.AO_LI_RevocationDate.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_RevocationDate_getValue) on item 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(28));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, "TagValue", AO_LI_RevocationDate_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_RevocationDate_getValue, new RecordItemIndex(29));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(30));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(31));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AO_LI_RevocationDate_getValue' with focus on 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(32));
            repo.ApplicationUnderTest.AO_LI_RevocationDate.PressKeys(Edit_AO_LI_RevocationDate_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.AO_LI_Revoked'.", repo.ApplicationUnderTest.AO_LI_RevokedInfo, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevokedInfo, "Checked", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='true') on item 'ApplicationUnderTest.AO_LI_Revoked'.", repo.ApplicationUnderTest.AO_LI_RevokedInfo, new RecordItemIndex(34));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevokedInfo, "Value", "true");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(35));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(36));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(37));
            Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='O_Employment Place') on item 'ApplicationUnderTest.AO_LI_EmploymentPlace'.", repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, new RecordItemIndex(38));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, "TagValue", "O_Employment Place");
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_SSN) on item 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(39));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_SSNInfo, "InnerText", Edit_AO_LI_SSN);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_SSN, new RecordItemIndex(40));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_DateOfBirth_getValue) on item 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(41));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, "InnerText", Edit_AO_LI_DateOfBirth_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_DateOfBirth_getValue, new RecordItemIndex(42));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_LicenseNumber) on item 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(43));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, "InnerText", Edit_AO_LI_LicenseNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_LicenseNumber, new RecordItemIndex(44));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_LicenseState) on item 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(45));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, "InnerText", Edit_AO_LI_LicenseState);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_LicenseState, new RecordItemIndex(46));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_AO_LI_RevocationDate_getValue) on item 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(47));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, "InnerText", Edit_AO_LI_RevocationDate_getValue);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AO_LI_RevocationDate_getValue, new RecordItemIndex(48));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 46;15.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(49));
            repo.ApplicationUnderTest.SubmitButton1.Click("46;15");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
